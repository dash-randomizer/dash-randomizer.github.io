import { decodeSeed, paramsToString } from 'core'
import Seed from '../../seed/[seed]/seed'
import { fromSafeString, prefetchSignature, toSafeString } from 'core'
import Toaster from '../../components/toaster'
import Link from 'next/link'
import styles from '../../seed/[seed]/seed.module.css'
//import { brotliCompressSync, constants } from 'zlib'

export async function generateMetadata({ params }: { params : { hash: string }}) {
  return {
    title: `DASH Randomizer Race`,
    description: params.hash
  }
}

// Function to convert a string to Uint8Array
function stringToUint8Array(str: string) {
  return new TextEncoder().encode(str);
}

// Function to compress data with a dictionary
//function compressWithDictionary(hash: string) {
  //brotliCompressSync()
  //const { compress } = compatto({ dictionary })
  //return compress(hash)
//}

function getPermalink(bytes: Uint8Array) {
  //const dictionary = stringToUint8Array('');
  //const dataUint8Array = bytes

  // Brotli compression options with a custom dictionary
  //const options = {
    //params: {
      //[constants.BROTLI_PARAM_MODE]: constants.BROTLI_MODE_GENERIC, // Optimal for text
      //[constants.BROTLI_PARAM_QUALITY]: 11, // Maximum compression quality
      //[constants.BROTLI_PARAM_SIZE_HINT]: dataUint8Array.length, // Hint for data size
    //},
    //dictionary,
  //};

  // Compress the data
  //return toSafeString(brotliCompressSync(dataUint8Array, options))
  return toSafeString(bytes)
}

export default async function PermaSeedPage({ params }: { params: { hash: string } }) {
  const { hash } = params;
  const bytes = fromSafeString(hash)
  const decoded = decodeSeed(bytes);

  const paramHash = paramsToString(
    decoded.params.seed,
    decoded.params.settings,
    decoded.params.options
  );
  const seedNum = decoded.params.seed
  const sig = prefetchSignature(seedNum)
  const perma = getPermalink(bytes)

  const SeedFooter = () => {
    return (
      <footer className={styles.footer}>
        <p>
          <Link href={`/z/${perma}`}>Permalink</Link>
          <br />
          This seed was generated by
          <br />
          <Link href="/">DASH Randomizer</Link>
        </p>
      </footer>
    );
  };

  return (
    <main className={styles.container}>
      <h1 className={styles.logo}>DASH</h1>
      <Seed
        parameters={decoded.params}
        hash={paramHash}
        signature={sig}
        slug={paramHash}
        permaHash={hash}
      />
      <SeedFooter />
      <Toaster />
    </main>
  )
}
